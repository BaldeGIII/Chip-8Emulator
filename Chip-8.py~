import time

class Chip8:
    def __init__(self):
        # Chip-8 has 4096 bytes of memory
        self.memory = [0] * 4096

        # 16 registers V0 to VF
        self.V = [0] * 16

        # Index register and program counter
        self.I = 0
        self.pc = 0x200 # Program counter starts at 0x200

        # Stack and stack pointer
        self.stack = []
        self.sp = 0

        # Timers
        self.delay_timer = 0
        self.sound_timer = 0

        # Display (64x32 pixels)
        self.display = [0] * 64 * 32

        # Keyboard (16 keys)
        self.keypad = [0] * 16

        # Load fontset into memory
        self.load_fontset()


    def load_fontset(self):
        fontset = [
            0xF0, 0x90, 0x90, 0x90, 0xF0,  # 0
            0x20, 0x60, 0x20, 0x20, 0x70,  # 1
            0xF0, 0x10, 0xF0, 0x80, 0xF0,  # 2
            0xF0, 0x10, 0xF0, 0x10, 0xF0,  # 3
            0x90, 0x90, 0xF0, 0x10, 0x10,  # 4
            0xF0, 0x80, 0xF0, 0x10, 0xF0,  # 5
            0xF0, 0x80, 0xF0, 0x90, 0xF0,  # 6
            0xF0, 0x10, 0x20, 0x40, 0x40,  # 7
            0xF0, 0x90, 0xF0, 0x90, 0xF0,  # 8
            0xF0, 0x90, 0xF0, 0x10, 0xF0,  # 9
            0xF0, 0x90, 0xF0, 0x90, 0x90,  # A
            0xE0, 0x90, 0xE0, 0x90, 0xE0,  # B
            0xF0, 0x80, 0x80, 0x80, 0xF0,  # C
            0xE0, 0x90, 0x90, 0x90, 0xE0,  # D
            0xF0, 0x80, 0xF0, 0x80, 0xF0,  # E
            0xF0, 0x80, 0xF0, 0x80, 0x80  # F
        ]

        for i in range(len(fontset)):
            self.memory[i] = fontset[i]

    def emulate_cycle(self):

        # Fetch the next opcode
        opcode = self.memory[self.pc] << 8 | self.memory[self.pc + 1]

        # Decode and execute the opcode
        self.execute_opcode(opcode)

        # Update timers
        if self.delay_timer > 0:
            self.delay_timer -= 1
        if self.sound_timer > 0:
            self.sound_timer -= 1

    def execute_opcode(self, opcode):
        print(f'PC: {self.pc:03X} Opcode: {opcode:04X}')  # Debugging line
        # Extract the first 4 bits of the opcode
        first_nibble = opcode & 0xF000

        if first_nibble == 0x0000:
            if opcode == 0x00E0:
                # 00E0: Clear the display
                self.display = [0] * 64 * 32
            elif opcode == 0x00EE:
                # 00EE: Return from a subroutine
                self.pc = self.stack.pop()
            else:
                print(f'Unknown opcode: {opcode:04X}')
        elif first_nibble == 0x1000:
            # 1NNN: Jump to address NNN
            self.pc = opcode & 0x0FFF
        elif first_nibble == 0x2000:
        else:
            print(f'Unknown opcode: {opcode:04X}')

        if first_nibble != 0x1000 and opcode != 0x00EE:
            self.pc += 2

    def load_rom(self, rom_file):
        with open(rom_file, 'rb') as f:
            rom_data = f.read()
            for i in range(len(rom_data)):
                self.memory[0x200 + i] = rom_data[i]

chip8 = Chip8()
chip8.load_rom('Roms/Space Invaders [David Winter].ch8')
while True:
    chip8.emulate_cycle()
    time.sleep(1/60)